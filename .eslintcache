[{"/Users/zulie/Desktop/modal/Practice/src/index.js":"1","/Users/zulie/Desktop/modal/Practice/src/Routes.js":"2","/Users/zulie/Desktop/modal/Practice/src/pages/props/Parent.js":"3","/Users/zulie/Desktop/modal/Practice/src/pages/props/Mother.js":"4","/Users/zulie/Desktop/modal/Practice/src/pages/compare/CompareButton.js":"5","/Users/zulie/Desktop/modal/Practice/src/pages/props/Baby.js":"6","/Users/zulie/Desktop/modal/Practice/src/pages/config.js":"7","/Users/zulie/Desktop/modal/Practice/src/pages/props/Children.js":"8","/Users/zulie/Desktop/modal/Practice/src/pages/compare/ModalButton.js":"9","/Users/zulie/Desktop/modal/Practice/src/pages/compare/BrandBuildingPage.js":"10","/Users/zulie/Desktop/modal/Practice/src/pages/compare/test.js":"11","/Users/zulie/Desktop/modal/Practice/src/pages/compare/BrandPage.js":"12"},{"size":300,"mtime":1612764119504,"results":"13","hashOfConfig":"14"},{"size":722,"mtime":1612747158297,"results":"15","hashOfConfig":"14"},{"size":1412,"mtime":1612752846641,"results":"16","hashOfConfig":"14"},{"size":2005,"mtime":1612752858918,"results":"17","hashOfConfig":"14"},{"size":2115,"mtime":1612774140103,"results":"18","hashOfConfig":"14"},{"size":557,"mtime":1612745780718,"results":"19","hashOfConfig":"14"},{"size":38,"mtime":1612745780718,"results":"20","hashOfConfig":"14"},{"size":530,"mtime":1612745780718,"results":"21","hashOfConfig":"14"},{"size":2654,"mtime":1612768981535,"results":"22","hashOfConfig":"14"},{"size":6463,"mtime":1612774824675,"results":"23","hashOfConfig":"14"},{"size":844,"mtime":1612752840652,"results":"24","hashOfConfig":"14"},{"size":4588,"mtime":1612769310887,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1id7cic",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"28"},"/Users/zulie/Desktop/modal/Practice/src/index.js",[],["55","56"],"/Users/zulie/Desktop/modal/Practice/src/Routes.js",[],"/Users/zulie/Desktop/modal/Practice/src/pages/props/Parent.js",[],"/Users/zulie/Desktop/modal/Practice/src/pages/props/Mother.js",[],"/Users/zulie/Desktop/modal/Practice/src/pages/compare/CompareButton.js",["57"],"import React, { Fragment, useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport ModalButton from './ModalButton';\nimport { API } from '../config';\nimport { atom, useRecoilState } from 'recoil';\n\nexport const compareState = atom({\n    key: 'CompareButton',\n    default: [],\n});\n\nconst CompareButton = () => {\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [isModalProduct, setIsModalProduct] = useState(false);\n    const [data, setData] = useRecoilState(compareState);\n\n    useEffect(() => {\n        fetch(API)\n            .then((res) => res.json())\n            .then((res) => setData(res.data.content));\n    }, []);\n\n    const handleShowModal = () => {\n        setIsModalOpen(!isModalOpen);\n    };\n\n    const handleModalProduct = () => {\n        setIsModalProduct(!isModalProduct);\n    };\n\n    const handleCheck = (e) => {\n        const item = data[3];\n        const { checked } = e.target;\n        if (checked) {\n            // add item\n            addItem(new Date().getMilliseconds(), item);\n        } else {\n            removeItem(item.id);\n        }\n    };\n\n    const addItem = (id, item) => {\n        setData((data) => [...data, { ...item, id }]);\n    };\n\n    const removeItem = (id) => {\n        setData(data.filter((data) => data.id !== id));\n    };\n\n    return (\n        <Fragment>\n            <Container>\n                <input type='checkbox' onChange={handleCheck} />\n                <Wrapper>비교</Wrapper>\n            </Container>\n            <ModalButton\n                handleAddItem={addItem}\n                isModalProduct={isModalProduct}\n                removeItem={removeItem}\n                data={data}\n                isModalOpen={isModalOpen}\n                handleshowModal={handleShowModal}\n                handleModalProduct={handleModalProduct}\n            />\n        </Fragment>\n    );\n};\n\nexport default CompareButton;\n\nconst Wrapper = styled.div`\n    margin: 10px;\n    font-size: 15px;\n`;\n\nconst Container = styled.div`\n    display: flex;\n\n    input {\n        width: 15px;\n        height: 15px;\n        margin-top: 10px;\n    }\n`;\n","/Users/zulie/Desktop/modal/Practice/src/pages/props/Baby.js",[],"/Users/zulie/Desktop/modal/Practice/src/pages/config.js",[],"/Users/zulie/Desktop/modal/Practice/src/pages/props/Children.js",[],"/Users/zulie/Desktop/modal/Practice/src/pages/compare/ModalButton.js",["58"],"import React, { Fragment, useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport BrandBuildingPage from './BrandBuildingPage';\nimport BrandPage from './BrandPage';\n\nconst ModalButton = ({ id, data, removeItem, isModalOpen }) => {\n    const [isModalProduct, setIsModalProduct] = useState(false);\n\n    const handleModalProduct = () => {\n        setIsModalProduct(!isModalProduct);\n    };\n\n    return (\n        <Fragment>\n            <Toggle isModalOpen={isModalOpen}>\n                <Compare onClick={() => handleModalProduct()}>\n                    <span>견적 비교하기</span>\n                    <PlaceNumber data={data}>({!data ? 0 : data?.length}/5)</PlaceNumber>\n                    <Arrow />\n                </Compare>\n                <Line />\n                {/* <BrandPage id={id} removeItem={removeItem} isModalProduct={isModalProduct} /> */}\n                <BrandBuildingPage id={id} removeItem={removeItem} isModalProduct={isModalProduct} />\n            </Toggle>\n        </Fragment>\n    );\n};\n\nexport default ModalButton;\n\nconst Toggle = styled.div`\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    position: absolute;\n    bottom: 0;\n`;\n\nconst Compare = styled.button`\n    position: relative;\n    justify-content: center;\n    box-sizing: border-box;\n    width: 200px;\n    height: 44px;\n    outline-style: none;\n    margin: 0 0 -1px 208px;\n    border-radius: 8px;\n    background-color: #212121;\n    color: #ffffff;\n    font-weight: 500;\n    padding: 10px 48px 10px 24px;\n\n    span {\n        color: ${(props) => (props.isModalProduct ? '#ffffff' : 'ff5b29')};\n        font-size: 14px;\n        text-align: center;\n        font-family: NotoSansKR;\n        margin: 0 0 7px;\n        width: 128px;\n        height: 24px;\n        line-height: normal;\n    }\n\n    &:hover {\n        cursor: pointer;\n    }\n`;\n\nconst PlaceNumber = styled.span`\n    color: ${(props) => (!props.data ? 'white' : '#ff5b29')};\n`;\n\nconst Line = styled.div`\n    width: 100%;\n    height: 2px;\n    background-color: #212121;\n`;\n\nconst Up = css`\n    content: '';\n    width: 7px;\n    height: 7px;\n    border-top: 3px solid #fff;\n    border-right: 3px solid #fff;\n    display: inline-block;\n    transform: rotate(315deg);\n    position: absolute;\n    top: 17px;\n    right: 35px;\n`;\n\nconst Down = css`\n    content: '';\n    width: 7px;\n    height: 7px;\n    border-top: 3px solid #fff;\n    border-right: 3px solid #fff;\n    display: inline-block;\n    transform: rotate(135deg);\n    position: absolute;\n    top: 12px;\n    right: 35px;\n`;\n\nconst Arrow = styled.div`\n    display: ${(props) => (props.isModalOpen ? `${Down}` : `${Up}`)};\n`;\n","/Users/zulie/Desktop/modal/Practice/src/pages/compare/BrandBuildingPage.js",["59","60","61","62","63"],"/Users/zulie/Desktop/modal/Practice/src/pages/compare/test.js",["64"],"function test(number) {\n    var inputNumber = number < 0 ? false : number;\n    var unitWords = ['', '만원'];\n    var splitUnit = 10000;\n    var splitCount = unitWords.length;\n    var resultArray = [];\n    var resultString = '';\n\n    for (var i = 0; i < splitCount; i++) {\n        var unitResult = (inputNumber % Math.pow(splitUnit, i + 1)) / Math.pow(splitUnit, i);\n        unitResult = Math.floor(unitResult);\n        if (unitResult > 0) {\n            resultArray[i] = unitResult;\n        }\n    }\n\n    for (var i = 0; i < resultArray.length; i++) {\n        if (!resultArray[i]) continue;\n        resultString = String(resultArray[i]) + unitWords[i] + resultString;\n    }\n\n    return resultString;\n}\n// console.log(\n//     test(19823710000)\n//         .toString()\n//         .replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n// );\n\nexport default test;\n","/Users/zulie/Desktop/modal/Practice/src/pages/compare/BrandPage.js",["65"],"import React, { Fragment, useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { API } from '../config';\n\nconst ModalPage = ({ id, isModalProduct, removeItem }) => {\n    const [content, setContent] = useState([]);\n\n    useEffect(() => {\n        fetch(API)\n            .then((res) => res.json())\n            .then((res) => {\n                setContent(res.data.content);\n            });\n    }, []);\n\n    const countNumber = (number) => {\n        var inputNumber = number < 0 ? false : number;\n        var unitWords = ['', '만원'];\n        var splitUnit = 10000;\n        var splitCount = unitWords.length;\n        var resultArray = [];\n        var resultString = '';\n\n        for (var i = 0; i < splitCount; i++) {\n            var unitResult = (inputNumber % Math.pow(splitUnit, i + 1)) / Math.pow(splitUnit, i);\n            unitResult = Math.floor(unitResult);\n            if (unitResult > 0) {\n                resultArray[i] = unitResult;\n            }\n        }\n\n        for (var i = 0; i < resultArray.length; i++) {\n            if (!resultArray[i]) continue;\n            resultString = String(resultArray[i]) + unitWords[i] + resultString;\n        }\n\n        return resultString;\n    };\n\n    return (\n        <Fragment>\n            <WrapModal isModalProduct={isModalProduct}>\n                <Categories>\n                    <div className='category'>예상 창업비용</div>\n                    <div className='category'>예상 월 수익</div>\n                </Categories>\n                <PlaceData>\n                    {content?.map((content, idx) => {\n                        return (\n                            <Place key={idx} onClick={() => removeItem(id)}>\n                                <img className='placeLogo' src={content.logo} alt='logo'></img>\n                                <div className='delete'>X</div>\n                                <div className='placetype'>{content.typeBusiness}</div>\n                                <div className='brand'>{content.franchiseBrandName}</div>\n                                <div className='container'>\n                                    <div className='info'>\n                                        {countNumber(content.estimatedInitialInvestmentCost)\n                                            .toString()\n                                            .replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n                                    </div>\n                                    <div className='info'>\n                                        {countNumber(content.expectationProfit)\n                                            .toString()\n                                            .replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n                                    </div>\n                                </div>\n                            </Place>\n                        );\n                    })}\n                </PlaceData>\n            </WrapModal>\n            <EmptyContainer></EmptyContainer>\n        </Fragment>\n    );\n};\n\nconst EmptyContainer = styled.div``;\nconst WrapModal = styled.div`\n    display: ${(props) => (props.isModalProduct ? 'flex' : 'none')};\n    justify-content: flex-start;\n    margin: 0 208px;\n`;\n\nconst Categories = styled.div`\n    font-size: 10px;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n    width: 60px;\n    text-align: left;\n    padding-top: 186px;\n    color: #929292;\n\n    .category {\n        padding: 9px 0;\n        border-bottom: 1px solid #eeeeee;\n    }\n`;\n\nconst PlaceData = styled.div`\n    display: flex;\n`;\n\nconst Place = styled.div`\n    justify-content: center;\n    text-align: center;\n    font-size: 14px;\n    height: 20px;\n    font-weight: 700;\n\n    .placeLogo {\n        border-radius: 14px;\n        position: absolute;\n        top: 55px;\n        left: 75px;\n        width: 40px;\n        height: 40px;\n    }\n\n    .delete {\n        position: absolute;\n        top: 5px;\n        right: 5px;\n        font-size: 15px;\n        color: white;\n        background-color: rgba(0, 0, 0, 0.5);\n        border-radius: 100%;\n        width: 20px;\n        height: 20px;\n\n        &:hover {\n            cursor: pointer;\n        }\n    }\n\n    .placetype {\n        font-size: 12px;\n        font-weight: 500;\n        height: 18px;\n    }\n\n    .container {\n        text-align: right;\n        margin-top: 20px;\n        font-weight: 500;\n\n        .info {\n            border-bottom: 1px solid #eeeeee;\n            padding: 6.5px 50px 6.5px 30px;\n            font-weight: 600;\n            color: #212121;\n        }\n    }\n`;\n\nexport default ModalPage;\n",{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":21,"column":8,"nodeType":"72","endLine":21,"endColumn":10,"suggestions":"73"},{"ruleId":"74","severity":1,"message":"75","line":4,"column":8,"nodeType":"76","messageId":"77","endLine":4,"endColumn":17},{"ruleId":"74","severity":1,"message":"78","line":1,"column":27,"nodeType":"76","messageId":"77","endLine":1,"endColumn":35},{"ruleId":"74","severity":1,"message":"79","line":1,"column":37,"nodeType":"76","messageId":"77","endLine":1,"endColumn":46},{"ruleId":"74","severity":1,"message":"80","line":4,"column":10,"nodeType":"76","messageId":"77","endLine":4,"endColumn":13},{"ruleId":"74","severity":1,"message":"81","line":9,"column":21,"nodeType":"76","messageId":"77","endLine":9,"endColumn":31},{"ruleId":"82","severity":1,"message":"83","line":27,"column":18,"nodeType":"76","messageId":"84","endLine":27,"endColumn":19},{"ruleId":"82","severity":1,"message":"83","line":17,"column":14,"nodeType":"76","messageId":"84","endLine":17,"endColumn":15},{"ruleId":"82","severity":1,"message":"83","line":32,"column":18,"nodeType":"76","messageId":"84","endLine":32,"endColumn":19},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setData'. Either include it or remove the dependency array.","ArrayExpression",["87"],"no-unused-vars","'BrandPage' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useEffect' is defined but never used.","'API' is defined but never used.","'setContent' is assigned a value but never used.","no-redeclare","'i' is already defined.","redeclared","no-global-assign","no-unsafe-negation",{"desc":"88","fix":"89"},"Update the dependencies array to be: [setData]",{"range":"90","text":"91"},[662,664],"[setData]"]